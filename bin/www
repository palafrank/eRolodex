#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('erolodex-server:server');
var http = require('http');
var https = require('https');
var fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
app.set('secPort', port+443);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);


/**
 * Create https server.
 * Creating a certificate:
 *
 * Generate a private key
 *        # openssl genrsa -des3 -out private.key 1024
 * Generate a certificate request
 *        # openssl req -new -key private.key -out cert.csr
 * Remove the passphrase from the certificate
 *        # cp private.key private.key.org
 *        # openssl rsa -in private.key.org -out private.key
 * Self sign the certificate
 *        # openssl x509 -req -days 365 -in cert.csr -signkey private.key -out server.crt
 */

 var options = {
   key: fs.readFileSync(__dirname+'/private.key'),
   cert: fs.readFileSync(__dirname+'/server.crt')
 };

 var secureServer = https.createServer(options, app);

 //secureServer.listen(app.get('secPort'), function() {
//   console.log('Server listening on port ', app.get('secPort'));
 //});
 //secureServer.on('error', onError);
 //secureServer.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
